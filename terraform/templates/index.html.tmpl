<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Atlas RS Greeting Demo (${cluster_name})</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { font-family: system-ui, Arial, sans-serif; margin: 2rem; max-width: 760px; }
    h1 { font-size: 1.4rem; }
    .latest { padding: 1rem; border: 1px solid #ccc; border-radius: 6px; background: #fafafa; min-height: 3rem; }
    label { display:block; margin-top:1rem; font-weight:600; }
    input[type=number]{ width:6rem; }
    button { margin-top:1rem; padding:.6rem 1rem; border:1px solid #2b5; background:#2d7; color:#fff; border-radius:4px; cursor:pointer; }
    button:hover { background:#268d46; }
    code { background:#eee; padding:2px 4px; border-radius:3px; }
    footer { margin-top:2rem; font-size:.75rem; color:#666; }
    .warn { color:#b00; font-weight:600; }
  </style>
</head>
<body>
  <h1>Latest Greeting (MongoDB Atlas Replica Set)</h1>
  <p>This regional static site polls the nearest replica set member (readPreference=nearest) via GCP Cloud Functions (v2) using the MongoDB Node.js driver.</p>

  <div class="latest" id="latestBox">Loading...</div>

  <label>Refresh Interval (ms): <input id="intervalInput" type="number" min="20" max="10000" step="10" value="${refresh_default_ms}" /></label>
  <button id="recordBtn">Record Greeting</button>

  <p id="status"></p>

  <noscript><p class="warn">JavaScript required.</p></noscript>

  <script>
  const DB = "test";
  const COLL = "test"; // collection name
  const latestBox = document.getElementById('latestBox');
  const recordBtn = document.getElementById('recordBtn');
  const intervalInput = document.getElementById('intervalInput');
  const statusEl = document.getElementById('status');

  // API base: hardcoded to the regional function URL
  const API_BASE = "${api_base}";

  async function fetchLatest(){
    try {
      const res = await fetch(API_BASE + '/latest');
      if(!res.ok){
        const text = await res.text();
        throw new Error('HTTP ' + res.status + ': ' + text.slice(0,120));
      }
      const json = await res.json();
      if(json && json.latest) {
        const d = json.latest;
        latestBox.textContent = ((d.timestamp||'') + ' - ' + (d.message||''));
      } else {
        latestBox.textContent = 'No greetings yet';
      }
    } catch(e){
      latestBox.textContent = 'Error fetching latest: ' + e;
    }
  }

  async function insertGreeting(){
    const greetings = ['Hello','Hi','G\u2019day','Hola','Bonjour','Ciao','Kia Ora','Namaste'];
    const message = greetings[Math.floor(Math.random()*greetings.length)] + ' from ' + (Intl.DateTimeFormat().resolvedOptions().timeZone || 'local');
    try {
      statusEl.textContent = 'Recording...';
      const res = await fetch(API_BASE + '/greet', { method:'POST' });
      if(!res.ok){
        const text = await res.text();
        throw new Error('HTTP ' + res.status + ': ' + text.slice(0,120));
      }
      const json = await res.json();
      if(json.insertedId){
        statusEl.textContent = 'Inserted ' + json.insertedId;
        fetchLatest();
      } else {
        statusEl.textContent = 'Insert error';
      }
    } catch(e){
      statusEl.textContent = 'Error: ' + e;
    }
  }

  recordBtn.addEventListener('click', insertGreeting);

  let timer = null;
  function schedule(){
    if(timer) clearInterval(timer);
    const ms = Math.min(10000, Math.max(20, parseInt(intervalInput.value,10) || ${refresh_default_ms}));
    timer = setInterval(fetchLatest, ms);
  }
  intervalInput.addEventListener('change', schedule);

  // Start only if API_BASE looks valid; otherwise instruct user
  schedule();
  fetchLatest();
  </script>
  <footer>Demo only. Using API base: <code>${api_base}</code>.</footer>
</body>
</html>
